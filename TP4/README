Vitor Rodarte Ricoy - 2019007112
Vitor Assunção Rabello de Oliveira - 2019007104

As decisões que tomamos foram:

- Colocamos comentários em portugues, mas o código e debug estão em ingles.

- Delegamos a geração de código para os CgenNodes, fazendo o CgenClassTable chamar métodos do CgenNodes.

- Salvamos todos os offsets em maps, sendo os maps criados:
  - offsetClassAttr que salva o offset e símbolo dos atributos das classes
  - methodOffsetClassMethod que salva o offset, símbolo e nó da classe dos métodos das classes
  - classNodeMap que salva o nó de uma classe de acordo com seu símbolo

- Criamos dois maps para guardar informações das tags: classesByTags, que salva o nó da classe de uma tag; e tagByClass,
que salva a tag de uma dada classe.

- As tags são definidas antes da geração de código, e essa definição que salva a tag escolhida para Bool, Int e String.
As tags são escolhidas de forma decrescente, ou seja, as classes filhas têm tags menores que as classes pais.

- Foi criado um método code_classPrototypeTable para gerar uma tabela que indexa de acordo com a tag o endereço do prototype e do init da classe 
que possui a tag. Essa tabela é necessária para implementar o new do SELF_TYPE, já que devemos encontrar o init e prototype do self.

- Criamos a classe Scope para lidar com o estado. O que pôde ser implementado no .h foi implementado lá por simplicidade. O que precisava de variáveis
ou métodos do cgen.cc foi implementado nele.

- Na geração de código das expressões criamos uma variável labelId que mantém um id único para que possamos definir labels distintas.

- Foi decidido que em casos de erros (que não deveriam acontecer, já que existe uma analisador semântico que é executado antes) nosso código gera um 
string "ERRO" no assembly, que deverá gerar erros ao executar o código gerado.

- Alteramos, de acordo com a nossa necessidade, os parâmetros dos emits para receber um const char * ao invés de char*.

- O próprio método é responsável por fazer o pop dos seus argumentos, enquanto o dispatch faz o push.

Já sobre os testes, criamos seis testes distintos, que estão na pasta testes:

- t1.cl testa se a string lida é palindroma.
- t2.cl testa várias operações e deve dar output de -301.
- t3.cl testa um dispatch void.
- t4.cl testa um case em um objeto void.
- t5.cl testa um case sem match.
- t6.cl verifica algumas operações aritméticas e se o case funciona para uma classe pai e se prefere a classe filha à classe pai.

O arquivo de teste t2.cl foi escolhido para representar um teste mais completo, sendo copiado para o arquivo example.cl. Também testamos esses arquivos
com a opção do garbage collector, e tudo indica que ele está funcionando corretamente.

Por fim, acreditamos que nosso programa está correto, pois durante a construção do gerador de código as operações realizados por nós fizeram sentido, 
portanto a implementação pareceu correta. Além disso, testamos o nosso gerador de código com o gerador fornecido, que está correto, e os resultados 
foram iguais. Finalmente, usamos o parser fornecido, e não o parser construído por nós no TP3, logo caso o TP3 esteja errado, esse TP não é afetado.